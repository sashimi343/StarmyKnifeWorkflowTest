name: Build and Release WPF App

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  SOLUTION_NAME: StarmyKnife.sln
  PROJECT_PATH: src/StarmyKnife/StarmyKnife.csproj
  PROJECT_NAME: StarmyKnife
  TARGET_FRAMEWORK: net8.0-windows
  RUNTIME: win-x64
  CONFIGURATION: Release
  OUTPUT_BASE: src/StarmyKnife/bin/Release/net8.0-windows/publish
  MSBUILD_VERSION: v1.3.1

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Extract version from tag
        id: get_version
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $version = $tag -replace '^v',''
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Extract changelog entry
        id: changelog
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $escapedVersion = [regex]::Escape($version)
          $content = Get-Content CHANGELOG.md -Raw
          if ($content -match "(?ms)^## \[$escapedVersion\][^\n]*\n\s*(.*?)(?=^## |\z)") {
            $changes = $matches[1].Trim()
          } else {
            $changes = "See the [CHANGELOG.md](CHANGELOG.md) for details."
          }
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$changes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@${{ env.MSBUILD_VERSION }}

      - name: Clean solution
        run: dotnet clean ./${{ env.SOLUTION_NAME }}

      - name: Restore dependencies
        run: dotnet restore ./${{ env.SOLUTION_NAME }} --runtime ${{ env.RUNTIME }}

      - name: Build solution
        run: dotnet build ./${{ env.SOLUTION_NAME }} --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Publish standalone (self-contained) package
        run: |
          $outputDir = "${{ env.OUTPUT_BASE }}/${{ env.PROJECT_NAME }}-standalone-${{ env.RUNTIME }}-${{ steps.get_version.outputs.version }}"
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.CONFIGURATION }} `
            --runtime ${{ env.RUNTIME }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:PublishReadyToRun=false `
            -p:PublishTrimmed=false `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -o $outputDir

      - name: Create ZIP (standalone package)
        shell: pwsh
        run: |
          $zipName = "${{ env.PROJECT_NAME }}-standalone-${{ env.RUNTIME }}-${{ steps.get_version.outputs.version }}.zip"
          $outputDir = "${{ env.OUTPUT_BASE }}/${{ env.PROJECT_NAME }}-standalone-${{ env.RUNTIME }}-${{ steps.get_version.outputs.version }}"
          Compress-Archive -Path "$outputDir\" -DestinationPath $zipName

      - name: Publish Framework-dependent package
        run: |
          $outputDir = "${{ env.OUTPUT_BASE }}/${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}"
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.CONFIGURATION }} `
            --runtime ${{ env.RUNTIME }} `
            --self-contained false `
            -p:PublishSingleFile=true `
            -p:PublishReadyToRun=false `
            -p:PublishTrimmed=false `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -o $outputDir

      - name: Create ZIP (Framework-dependent package)
        shell: pwsh
        run: |
          $zipName = "${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}.zip"
          $outputDir = "${{ env.OUTPUT_BASE }}/${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}"
          Compress-Archive -Path "$outputDir\" -DestinationPath $zipName

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          files: |
            ${{ env.PROJECT_NAME }}-standalone-${{ env.RUNTIME }}-${{ steps.get_version.outputs.version }}.zip
            ${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
